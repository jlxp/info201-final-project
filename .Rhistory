"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter')
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
# Set-up
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers')
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers')
#return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
# Set-up
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers')
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Popularity"))
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Popularity"))
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
JoysGraph <- function(spotifyPlaylist) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~danceability, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Danceability"))
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
JoysGraph('37i9dQZF1DXcBWIGoYBM5M')
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Danceability"))
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', danceability)
JoysGraph(37i9dQZF1DXcBWIGoYBM5M, danceability)
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
JoysGraph <- function(spotifyPlaylist) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~danceability, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Danceability"))
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', danceability)
JoysGraph('37i9dQZF1DXcBWIGoYBM5M')
library(shiny)
library(dplyr)
library(plotly)
source('./scripts/UserProfile.R')
source('./scripts/audio_features.R')
source('./scripts/top_artists.R')
source('./scripts/top_listened.R')
getwd()
shinyServer(function(input, output) {
#Aislinn's File
output$aislinns.plot <- renderPlotly({
CreateGraph({input$user.id})
})
output$aislinns.value <- renderText({GetDuration(input$user.id)})
#Joy's File
output$joys.plot <- renderPlotly({
JoysGraph(input$playlist.id)
})
})
library(shiny)
library(plotly)
shinyUI(navbarPage(
titlePanel("Trendy Tunes"),
sidebarLayout(
sidebarPanel(
textInput('user.id', "Enter the user id", '1295238919'),
textInput('playlist.id', "Enter the playlist id", '37i9dQZF1DXcBWIGoYBM5M')
),
mainPanel(
tabsetPanel(
tabPanel("Aislinn's Panel",
#img(src = 'test.png', align = "right"),
h4("Please be patient, it takes about 20 seconds to generate the graph"),
plotlyOutput('aislinns.plot'),
textOutput('aislinns.value')
),
tabPanel("Joy's Panel",
plotlyOutput('joys.plot')
)#,
#tabPanel("Table", tableOutput("table"))
)
)
)
))
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
# This file has 4 function. Function 1-3 are basically summed up in function #4
# Function 4 is the main function that was designed: artists.top.ten.frame
library(jsonlite)
library(httr)
library(dplyr)
# API information
endpoint.spotify <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
app.spotify <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
token.spotify <- oauth2.0_token(endpoint.spotify, app.spotify)
# search for artist
# function that takes artist name as input and outputs the artists ID
find.artist.id <- function(name.of.artist) {
if (grepl(" ", name.of.artist)) {
name.of.artist <- gsub(" ", "+", name.of.artist)
}
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[[1]])
}
# take in artist ID and give the top songs as a list
# top 10 songs function
top.10.songs <- function(artists.id) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", artists.id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- artist.results$tracks$name
return(top.ten)
}
# take in artist ID and give the top songs with popularity
# top 10 data frame function
frame.top.ten <- function(ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Popularity <- c()
Song <- c()
Preview <- c()
for (i in 1:10) {
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
}
top.ten.data.frame <- data.frame(Popularity, Song, Preview)
return(top.ten.data.frame)
}
# In this function, you search for an artist and it gives you a data frame of information
artists.top.ten.frame <- function(artist.name.search) {
# search for artist
if (grepl(" ", artist.name.search)) {
name.of.artist <- gsub(" ", "+", artist.name.search)
}
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
pop <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
for (i in 1:10) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, pop)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
return(top.ten.data.frame)
}
# Testing below
artists.top.ten.frame("drake")
View(artists.top.ten.frame("drake"))
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
runApp('C:/Users/Joy Phillips/Desktop/info201-final-project')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
