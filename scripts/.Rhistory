library(reshape2)
CreateChartTwo <- function(my.data){
data <- my.data %>% select(Class.Standing = ?..What.is.your.current.class.standing.,
Info.Major = Are.you.interested.in.applying.to.the.Informatics.major.)
ClassSummary <- function(class.name){
class <- data %>% filter(Class.Standing == class.name) %>%
group_by(Info.Major) %>%
summarise(n = n())
yes <- class %>% filter(Info.Major == "Yes") %>% select(n)
no <- class %>% filter(Info.Major == "No") %>% select(n)
na <- class %>% filter(Info.Major == "N/A" | Info.Major == "Maybe") %>% select(n) %>% sum()
results <- c(yes, no, na)
return(results)
}
freshman <- ClassSummary("Freshman")
sophomore <- ClassSummary("Sophomore")
junior <- ClassSummary("Junior")
senior <- ClassSummary("Senior")
yes.data <- list(freshman[1], sophomore[1], junior[1], senior[1])
no.data <- list(freshman[2], sophomore[2], junior[2], senior[2])
na.data <- list(freshman[3], sophomore[3], junior[3], senior[3])
class <- c("Freshman", "Sophomore", "Junior", "Senior")
class.data <- data.frame(Class = class, Yes = unlist(yes.data), No = unlist(no.data), Other = unlist(na.data))
class.data$Class  <- factor(class, levels = c("Freshman","Sophomore", "Junior", "Senior"))
class.data <- melt(class.data, id.var = 'Class')
plot <- ggplot(class.data, aes(x = Class, y = value, fill = variable)) +
geom_bar(stat = "identity") +
guides(fill = guide_legend(title = "Answer")) +
ggtitle("Are You Interested in Applying for the Informatics Major?") +
labs(x = "Class Standing", y = "# People")
return(plot)
}
source('./scripts/chart-2.r')
source('./scripts/chart-2.r')
#Enter a data frame and the function will return a plot comparing the
#number of people wanting to apply to the Info major in each class standing
library(ggplot2)
library(dplyr)
library(reshape2)
CreateChartTwo <- function(my.data){
data <- my.data %>% select(Class.Standing = What.is.your.current.class.standing.,
Info.Major = Are.you.interested.in.applying.to.the.Informatics.major.)
ClassSummary <- function(class.name){
class <- data %>% filter(Class.Standing == class.name) %>%
group_by(Info.Major) %>%
summarise(n = n())
yes <- class %>% filter(Info.Major == "Yes") %>% select(n)
no <- class %>% filter(Info.Major == "No") %>% select(n)
na <- class %>% filter(Info.Major == "N/A" | Info.Major == "Maybe") %>% select(n) %>% sum()
results <- c(yes, no, na)
return(results)
}
freshman <- ClassSummary("Freshman")
sophomore <- ClassSummary("Sophomore")
junior <- ClassSummary("Junior")
senior <- ClassSummary("Senior")
yes.data <- list(freshman[1], sophomore[1], junior[1], senior[1])
no.data <- list(freshman[2], sophomore[2], junior[2], senior[2])
na.data <- list(freshman[3], sophomore[3], junior[3], senior[3])
class <- c("Freshman", "Sophomore", "Junior", "Senior")
class.data <- data.frame(Class = class, Yes = unlist(yes.data), No = unlist(no.data), Other = unlist(na.data))
class.data$Class  <- factor(class, levels = c("Freshman","Sophomore", "Junior", "Senior"))
class.data <- melt(class.data, id.var = 'Class')
plot <- ggplot(class.data, aes(x = Class, y = value, fill = variable)) +
geom_bar(stat = "identity") +
guides(fill = guide_legend(title = "Answer")) +
ggtitle("Are You Interested in Applying for the Informatics Major?") +
labs(x = "Class Standing", y = "# People")
return(plot)
}
source('./scripts/chart-2.r')
df <- read.csv('./data/intro-survey.csv', stringsAsFactors = FALSE)
chart.2 <- CreateChartTwo(df)
chart.2
SummaryOfData(df, What.is.your.current.class.standing.)
info_function(df)
source('./scripts/summary-info.r')
summ <- info_function(df)
summary <- paste("From the class survey everyone took on the first day of class, we were able to discover a lot of information about the ", ret$total.surveyed, " people in the class.")
SummaryOfData(df, name.column = Are.you.interested.in.applying.to.the.Informatics.major.)
info_function(df)
source('./scripts/summary-info.r')
source('./scripts/summary-info.r')
summ <- info_function(df)
summary <- paste("From the class survey everyone took on the first day of class, we were able to discover a lot of information about the ", summ$total.surveyed, " people in the class. Out of these ", summ$total.surveyed, " students,", summ$freshman, " are freshman, ", summ$sophomore, " are sophomores, ", summ$junior, " are juniors, and ", summ$senior, " are seniors. Thus, the majority of the class is made up of sophomores and juniors. Also, out of the ", summ$total.surveyed, " students in INFO 201, ", summ$applying.to.info, " are planning on applying to the Informatics Major here at UW, while ", summ$not.applying.to.info, " are not planning on applying to the major. Those who are not applying to INFO are probably already in another major or exploring various classes that they find interesting. Finally, since this class is based so much on technology, it is intriguing to see how many people use Macs in comparison to how many people use Windows computers. In this class, ", summ$num.mac.users, " students use Macs, while ", summ$num.windows.users, " students use Windows. It is a pretty even split between the two. Overall, our class of ", summ$total.surveyed, " is definitely compelled by the subject matter of Informatics and wish to learn some of the basic technical aspects of Informatics in general.", sep = "")
summary
library(shiny)
install.packages("HSAUR")
library(HSAUR)
library(dplyr)
library(ggplot2)
data <- read.csv(womensrole)
data <- womensrole
View(data)
library(shiny)
runApp('Desktop/INFO 201/m18-shiny/exercise-5')
shinyUI(fluidPage(
# Add a descriptive application title
titlePanel("Women's Role in Society"),
# Here you will add the interactivity to your app
# Create a selectInput where the user can select either Men, Women, or Both.
# Create a selectInput where the user can select if they Agree or Disagree.
# Look at the Shiny documentation for selectInput and sliderInput syntax
# inputIDs's have been provided
sidebarLayout(
sidebarPanel(
#selectInput for Men, Women, or Both
#inputID = sex
selectInput(inputID = "sex",
label = "Sex:",
choices = "Men", "Women", "Both",
selected = "Both"),
#selectInput for Agree or Disagree
#inputID = thoughts
selectInput(inputID = "thoughts",
label = "Who:",
choices = "Agree", "Disagree",
selected = "Agree")
),
# Show a plot of the generated distribution
mainPanel(
#give your plot a descriptive name
plotOutput("rolePlot")
)
)
))
runApp('Desktop/INFO 201/m18-shiny/exercise-5')
runApp('Desktop/INFO 201/m18-shiny/exercise-5')
runApp('Desktop/INFO 201/m18-shiny/exercise-5')
runApp('Desktop/INFO 201/m18-shiny/exercise-5')
shiny::runApp('Desktop/INFO 201/m18-shiny/exercise-5')
install.packages(devtools)
install.packages("devtools")
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyEndpoint
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyApp
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
spotifyUser <- "1295238919"
spotifyPlaylist <- "3Xu4Lg4n7kYNYgJNg54K6j"
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=total,items(track(album(id)))",
sep="")
getTracks <- GET(playlistTracksURL, spotifyToken)
getTracks
startPlaylist <- jsonlite::fromJSON(toJSON(content(getTracks)))
startPlaylist
total <- as.matrix(startPlaylist[[1]]$track$album$id)
View(total)
if (startPlaylist$total > 100) {
offset <- trunc(startPlaylist$total/100)
for(i in 1:offset) {
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=items(track(album(id)))&offset="
,i*100,sep="")
getTracks <- GET(playlistTracksURL, spotifyToken)
subPlaylist <- jsonlite::fromJSON(toJSON(content(getTracks)))
total <- rbind(total, as.matrix(subPlaylist[[1]]$track$album$id))
}
}
total <- as.data.frame(total)
View(total)
id.list <- '0MhtZHWHKaWHcxbGriNVzs,4Ok5jEpeE2rjELaJYQzeFd,5O0s7Us9XA7lre1xURGve0,4svLfrPPk2npPVuI4kXPYg,3yoNZlqerJnsnMN5EDwwBS'
testalbumsURL <- paste("https://api.spotify.com/v1/albums/?ids=", id.list, sep ="")
getalbums <- GET(testalbumsURL, spotifyToken)
getalbums
albums <- fromJSON(toJSON(content(getalbums)))
albums
flat.albums <- flatten(albums$albums) %>% select(album_type, genres, id, name, popularity)
flat.albums
testalbumURL <- paste("https://api.spotify.com/v1/albums/", total[2,1],sep="")
testgetAlbum <- GET(testalbumURL, spotifyToken)
testalbum <- fromJSON(toJSON(content(testgetAlbum)))
test.name <- testalbum$name
library(httr)
library(jsonlite)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
spotifyUser <- 'mewmaryelizabeth'
spotifyPlaylist <- 'Gameday'
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=total,items(track(album(id)))"
,sep="")
playlistTracksURL
spotifyPlaylist <- 'Test'
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=total,items(track(album(id)))"
,sep="")
playlistTracksURL
spotifyUser <- "1295238919"
spotifyPlaylist <- "3Xu4Lg4n7kYNYgJNg54K6j"
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=total,items(track(album(id)))",
sep="")
playlistTracksURL
spotifyUser <- 'mewmaryelizabeth'
spotifyPlaylist <- '6auvlXOl5ReuRCo4ZvdIcb'
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=total,items(track(album(id)))"
,sep="")
playlistTracksURL
getTracks <- GET(playlistTracksURL, spotifyToken)
getTracks
startPlaylist <- jsonlite::fromJSON(toJSON(content(getTracks)))
total <- as.matrix(startPlaylist[[1]]$track$album$id)
if (startPlaylist$total > 100) {
offset <- trunc(startPlaylist$total/100)
for(i in 1:offset) {
playlistTracksURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser,
"/playlists/",
spotifyPlaylist,
"/tracks?fields=items(track(album(id)))&offset="
,i*100,sep="")
getTracks <- GET(playlistTracksURL, spotifyToken)
subPlaylist <- jsonlite::fromJSON(toJSON(content(getTracks)))
total <- rbind(total, as.matrix(subPlaylist[[1]]$track$album$id))
}
}
total <- as.data.frame(total)
View(total)
getPlaylists <- GET(paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists", sep = ""))
getPlaylists
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
spotifyUser <- 'mewmaryelizabeth'
getPlaylists <- GET(paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists", sep = ""))
getPlaylists
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
getSongs <- GET(paste("https://api.spotify.com/v1/users/",
spotityUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = ""))
spotifyUser <- 'mewmaryelizabeth'
getSongs <- GET(paste("https://api.spotify.com/v1/users/",
spotityUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = ""))
getSongs <- GET(paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = ""))
getSongs
songsURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = "")
songsURL
getSongs <- GET(songsURL, spotifyToken)
getSongs
startPlaylist <- jsonlite::fromJSON(toJSON(content(getSongs)))
spotifyUser <- 'spotify'
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
songsURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = "")
getSongs <- GET(songsURL, spotifyToken)
startPlaylist <- jsonlite::fromJSON(toJSON(content(getSongs)))
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
spotify.Endpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/ap1i/token")
spotify.App <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotify.Token <- oauth2.0_token(spotify.Endpoint, spotify.App)
user.id <- '1295238919'
user.profile.url <- paste('https://api.spotify.com/v1/users/', user.id, sep = "")
get.user.profile <- GET(user.profile.url, spotify.Token)
spotify.Token <- oauth2.0_token(spotify.Endpoint, spotify.App)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
user.id <- '1295238919'
user.profile.url <- paste('https://api.spotify.com/v1/users/', user.id, sep = "")
get.user.profile <- GET(user.profile.url, spotify.Token)
spotify.Token <- oauth2.0_token(spotifyEndpoint, spotifyApp)
spotify.Endpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/ap1i/token")
spotify.App <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotify.Token <- oauth2.0_token(spotify.Endpoint, spotify.App)
spotify.Endpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotify.App <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotify.Token <- oauth2.0_token(spotifyEndpoint, spotifyApp)
user.id <- '1295238919'
user.profile.url <- paste('https://api.spotify.com/v1/users/', user.id, sep = "")
get.user.profile <- GET(user.profile.url, spotify.Token)
user.profile <- fromJSON(toJSON(content(get.user.profile)))
display.name <- user.profile$display_name
display.name
display.image <- flatten(user.profile$images)$url
display.image
all.user.playlists.URL <- paste('https://api.spotify.com/v1/me/playlists', sep = "")
get.playlists <- GET(all.user.playlists.URL, spotify.Token)
all.user.playlists <- jsonlite::fromJSON(toJSON(content(get.playlists)))
flat.all.user.playlists <- flatten(all.user.playlists$items) %>%
select(id, name, public, external_urls.spotify, tracks.href, tracks.total, owner.id) %>%
filter(owner.id == user.id)
flat.all.user.playlists
GetTracks <- function(playlist.id){
get.row <- flat.all.user.playlists %>% filter(unlist(id) == playlist.id)
num.songs <- unlist(get.row$tracks.total)
offset <- 0
first.time <- TRUE
if(num.songs > 100){
while(num.songs > 100 && num.songs > 0){
tracks.url <- paste(unlist(get.row$tracks.href), "/?offset=", offset, sep = "")
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
my.tracks <- flatten(all.tracks$items) %>%
select(track.duration_ms, added_at, track.artists, track.id, track.name,
track.popularity, track.album.artists, track.album.id, track.album.name) %>%
filter(!is.null(track.album.name))
if(first.time){
flat.tracks <- my.tracks
first.time <- FALSE
} else {
flat.tracks <- rbind(flat.tracks, my.tracks)
}
offset <- offset + 100
num.songs <- num.songs - 100
}
tracks.url <- paste(unlist(get.row$tracks.href), "/?offset=", offset, sep = "")
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
my.tracks <- flatten(all.tracks$items) %>% select(track.duration_ms, added_at, track.artists, track.id, track.name, track.popularity, track.album.artists, track.album.id, track.album.name)
flat.tracks <- rbind(flat.tracks, my.tracks)
} else {
tracks.url <- unlist(get.row$tracks.href)
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
flat.tracks <- flatten(all.tracks$items) %>% select(track.duration_ms, added_at, track.artists, track.id, track.name, track.popularity, track.album.artists, track.album.id, track.album.name)
}
return(flat.tracks)
}
tracks <- lapply(flat.all.user.playlists$id, GetTracks)
flat.tracks <- do.call(rbind, tracks)
flat.tracks
tracks
GetArtist <- function(artist.list){
artists <- unlist(artist.list)[4]
return(artists)
}
artists <- lapply(flat.tracks$track.album.artists, GetArtist)
flat.artists <- unlist(artists)
flat.tracks$artist.name <- flat.artists
duration.ms <- unlist(flat.tracks$track.duration_ms) %>% sum()
duration.hours <- round(duration.ms / 3600000, 2)
popular.tracks <- flat.tracks %>% select(track.id, track.name, track.popularity, artist.name)
setwd("~/Desktop/INFO 201/info201-final-project/scripts")
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
spotifyUser <- 'spotify'
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
songsURL <- paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = "")
getSongs <- GET(songsURL, spotifyToken)
startPlaylist <- jsonlite::fromJSON(toJSON(content(getSongs)))
startPlaylist$items$track$name
startPlaylist$items$track$album
View(startPlaylist)
top.50.df <- as.data.frame(startPlaylist)
flat.playlist <- flatten(startPlaylist)
is.data.frame(startPlaylist)
is.matrix(startPlaylist)
is.list(startPlaylist)
startPlaylist$items
startPlaylist$items$track$
playlist.df <- flatten(startPlaylist$items) %>%
select(track)
startPlaylist$items$track$
playlist.df <- flatten(startPlaylist$items) %>%
select(startPlaylist$items$track)
startPlaylist$items$track$
playlist.df <- flatten(startPlaylist$items) %>%
select(startPlaylist$items$track$artists)
startPlaylist$items$track$artists
playlist.df <- data.frame(matrix(unlist(startPlaylist)), stringsAsFactors = FALSE)
View(playlist.df)
playlist.df <- data.frame(matrix(unlist(startPlaylist), nrow=50), stringsAsFactors = FALSE)
View(playlist.df)
playlist.df <- data.frame(matrix(unlist(startPlaylist), nrow= 51), stringsAsFactors = FALSE)
songs.URL <- paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = "")
get.Songs <- GET(songsURL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(getSongs)))
flat.playlist <- flatten(startPlaylist$items)
View(flat.playlist)
flat.playlist <- flatten(startPlaylist$items) %>%
select(track.name, track.album.name, track.duration_ms, track.explicit, track.popularity,
track.album.album_type)
songs.URL <- paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = "")
get.Songs <- GET(songsURL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(getSongs)))
all.playlist.flat <- flatten(all.playlist$items)
View(all.playlist.flat)
all.playlist <- jsonlite::fromJSON(toJSON(content(getSongs)))
all.playlist <- jsonlite::fromJSON(toJSON(content(getSongs)))
all.playlist.flat <- flatten(all.playlist$items)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.duration_ms, track.explicit, track.popularity,
track.album.album_type) %>%
filter(all.playlist.flat$track.artists)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.duration_ms, track.explicit, track.popularity,
track.album.album_type)
all.playlist.flat$track.artists
artists <- all.playlist.flat$track.artists
artists <- flatten(all.playlist.flat$track.artists)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity,
track.album.album_type)
artists <- all.playlist.flat$track.artists
artists
artists <- filter(all.playlist.flat) %>%
select(track.artists)
View(artists)
artists <- filter(all.playlist.flat) %>%
select(track.artists$name)
GetArtist <- function(artist.list){
artists <- unlist(artist.list)[4]
return(artists)
}
artists <- lapply(flat.tracks$track.album.artists, GetArtist)
artists <- lapply(flat.playlist$track.album.artists, GetArtist)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.artist, track.album.name, track.explicit, track.popularity,
track.album.album_type)
all.playlist <- jsonlite::fromJSON(toJSON(content(getSongs)))
all.playlist.flat <- flatten(all.playlist$items)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.artists, track.album.name, track.explicit, track.popularity,
track.album.album_type)
artists <- lapply(flat.playlist$track.artists, GetArtist)
flat.artists <- unlist(artists)
flat.tracks$artist.name <- flat.artists
flat.playlist$artist.name <- flat.artists
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity,
track.album.album_type)
flat.playlist$artist.name <- flat.artists
flat.playlist$track.artist.name <- flat.artists
if(flat.playlist$track.popularity = 100) {
flat.playlist <- TRUE
}
if(flat.playlist$track.popularity == '100') {
flat.playlist <- TRUE
}
flat.playlist$track.artist.name <- flat.artists
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity,
track.album.album_type)
flat.playlist$track.artist.name <- flat.artists
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity,
track.id, track.album.album_type)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity,
track.id, track.album.album_type)
flat.playlist$track.artist.name <- flat.artists
library(dplyr)
library(httr)
library(jsonlite)
library(devtools)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
spotifyUser <- 'spotify'
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
songs.URL <- paste("https://api.spotify.com/v1/users/",
spotifyUser, "/playlists/", spotifyPlaylist,
"/tracks", sep = "")
get.Songs <- GET(songsURL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(getSongs)))
all.playlist.flat <- flatten(all.playlist$items)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity,
track.id, track.album.album_type)
GetArtist <- function(artist.list){
artists <- unlist(artist.list)[4]
return(artists)
}
artists <- lapply(flat.playlist$track.artists, GetArtist)
flat.artists <- unlist(artists)
flat.playlist$track.artist.name <- flat.artists
