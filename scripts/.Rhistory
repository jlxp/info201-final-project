library(dplyr)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# search for artist
# function: artist name input
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
#return(artist.results$tracks)
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
tracks <- top.10.songs(FindArtistId("david+bowie"))
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
list = GET(uri, spotifyToken)
}
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# search for artist
# function: artist name input
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
#return(artist.results$tracks)
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
#return(artist.results$tracks)
}
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
list = GET(uri, spotifyToken)
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
tracks <- top.10.songs(FindArtistId("david+bowie"))
temp <- lapply(tracks$id, GetFeatures)
song1 <- temp[1]
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
list <- GET(uri, spotifyToken)
}
uri <- paste0("https://api.spotify.com/v1/audio-features/", "6mib3N4E8PZHAGQ3xy7bho")
list <- GET(uri, spotifyToken)
temp <- lapply(tracks$id, GetFeatures)
uri <- paste0("https://api.spotify.com/v1/audio-features/", "6mib3N4E8PZHAGQ3xy7bho")
list <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
uri <- paste0("https://api.spotify.com/v1/audio-features/", "6mib3N4E8PZHAGQ3xy7bho")
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
}
temp <- lapply(tracks$id, GetFeatures)
print(results)
temp <- as.data.frame(lapply(tracks$id, GetFeatures))
View(temp)
temp <- lapply(temp, data.frame)
print(temp)
temp <- lapply(tracks$id, GetFeatures)
temp <- data.frame(temp[1], temp[2])
View(temp)
temp <- lapply(tracks$id, GetFeatures, rbind)
temp <- lapply(tracks$id, GetFeatures)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
#This is all the stuff spotify needs to know before you start
spotify.Endpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/ap1i/token")
spotify.App <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotify.Token <- oauth2.0_token(spotify.Endpoint, spotify.App)
#https://play.spotify.com/user/1279377203
#For testing purposes
user.id <- '1279377203'
user.profile.url <- paste('https://api.spotify.com/v1/users/', user.id, sep = "")
get.user.profile <- GET(user.profile.url, spotify.Token)
user.profile <- fromJSON(toJSON(content(get.user.profile)))
display.name <- user.profile$display_name
display.image <- flatten(user.profile$images)$url
#Gets all the user's playlists and puts them in a data frame named flat.all.user.playlists. Removes all the playlists that aren't theirs.
all.user.playlists.URL <- paste('https://api.spotify.com/v1/me/playlists', sep = "")
get.playlists <- GET(all.user.playlists.URL, spotify.Token)
all.user.playlists <- jsonlite::fromJSON(toJSON(content(get.playlists)))
flat.all.user.playlists <- flatten(all.user.playlists$items) %>%
select(id, name, public, external_urls.spotify, tracks.href, tracks.total, owner.id) %>%
filter(owner.id == user.id)
#Gets all the user's songs and puts them in a data frame named flat.tracks
GetTracks <- function(playlist.id){
get.row <- flat.all.user.playlists %>% filter(unlist(id) == playlist.id)
num.songs <- unlist(get.row$tracks.total)
offset <- 0
first.time <- TRUE
#If there are more than 100 songs in the playlist, get all the songs
if(num.songs > 100){
while(num.songs > 100 && num.songs > 0){
tracks.url <- paste(unlist(get.row$tracks.href), "/?offset=", offset, sep = "")
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
my.tracks <- flatten(all.tracks$items) %>%
select(track.duration_ms, added_at, track.artists, track.id, track.name,
track.popularity, track.album.artists, track.album.id, track.album.name) %>%
filter(!is.null(track.album.name))
if(first.time){
flat.tracks <- my.tracks
first.time <- FALSE
} else {
flat.tracks <- rbind(flat.tracks, my.tracks)
}
offset <- offset + 100
num.songs <- num.songs - 100
}
tracks.url <- paste(unlist(get.row$tracks.href), "/?offset=", offset, sep = "")
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
my.tracks <- flatten(all.tracks$items) %>% select(track.duration_ms, added_at, track.artists, track.id, track.name, track.popularity, track.album.artists, track.album.id, track.album.name)
flat.tracks <- rbind(flat.tracks, my.tracks)
} else {
tracks.url <- unlist(get.row$tracks.href)
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
flat.tracks <- flatten(all.tracks$items) %>% select(track.duration_ms, added_at, track.artists, track.id, track.name, track.popularity, track.album.artists, track.album.id, track.album.name)
}
return(flat.tracks)
}
tracks <- lapply(flat.all.user.playlists$id, GetTracks)
flat.tracks <- do.call(rbind, tracks)
#Gets the artists for each of the songs and puts them in a single column
GetArtist <- function(artist.list){
artists <- unlist(artist.list)[4]
return(artists)
}
artists <- lapply(flat.tracks$track.album.artists, GetArtist)
flat.artists <- unlist(artists)
#Adds the extra column to flat.tracks
flat.tracks$artist.name <- flat.artists
#Lets get some random facts about the data! Because people are easily entertained! 1 min = 36,000,000 ms
duration.ms <- unlist(flat.tracks$track.duration_ms) %>% sum()
duration.hours <- round(duration.ms / 3600000, 2)
#Gets the popularity of all the tracks and creates a scatter plot of song vs popularity
popular.tracks <- flat.tracks %>% select(track.id, track.name, track.popularity, artist.name)
average.popularity <- round(unlist(popular.tracks$track.popularity) %>% sum() / nrow(popular.tracks), 0)
plot_ly(popular.tracks, x = ~track.name, y = ~track.popularity, type = "scatter", hoverinfo = "text",
text = ~paste("Song: ", unlist(track.name), "</br> Artist: ", as.list(artist.name), "</br> Populartiy: ", unlist(track.popularity), sep = "")) %>%
layout(xaxis = list(showticklabels = FALSE, title = "Your Songs"), yaxis = list(title = "Popularity"),
title = "The Popularity of Your Songs")
all.albums.URL <- 'https://api.spotify.com/v1/albums/3MHTGwjWJhfcc3yBnvo6yh'
get.albums <- GET(all.albums.URL, spotify.Token)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
album.genres <- all.albums$genres #this is an array and I don't know how to get things out now
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
#This is all the stuff spotify needs to know before you start
spotify.Endpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/ap1i/token")
spotify.App <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotify.Token <- oauth2.0_token(spotify.Endpoint, spotify.App)
#For testing purposes
user.id <- '1295238919'
user.profile.url <- paste('https://api.spotify.com/v1/users/', user.id, sep = "")
get.user.profile <- GET(user.profile.url, spotify.Token)
user.profile <- fromJSON(toJSON(content(get.user.profile)))
display.name <- user.profile$display_name
display.image <- flatten(user.profile$images)$url
#Gets all the user's playlists and puts them in a data frame named flat.all.user.playlists. Removes all the playlists that aren't theirs.
all.user.playlists.URL <- paste('https://api.spotify.com/v1/me/playlists', sep = "")
get.playlists <- GET(all.user.playlists.URL, spotify.Token)
all.user.playlists <- jsonlite::fromJSON(toJSON(content(get.playlists)))
flat.all.user.playlists <- flatten(all.user.playlists$items) %>%
select(id, name, public, external_urls.spotify, tracks.href, tracks.total, owner.id) %>%
filter(owner.id == user.id)
#Gets all the user's songs and puts them in a data frame named flat.tracks
GetTracks <- function(playlist.id){
get.row <- flat.all.user.playlists %>% filter(unlist(id) == playlist.id)
num.songs <- unlist(get.row$tracks.total)
offset <- 0
first.time <- TRUE
#If there are more than 100 songs in the playlist, get all the songs
if(num.songs > 100){
while(num.songs > 100 && num.songs > 0){
tracks.url <- paste(unlist(get.row$tracks.href), "/?offset=", offset, sep = "")
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
my.tracks <- flatten(all.tracks$items) %>%
select(track.duration_ms, added_at, track.artists, track.id, track.name,
track.popularity, track.album.artists, track.album.id, track.album.name) %>%
filter(!is.null(track.album.name))
if(first.time){
flat.tracks <- my.tracks
first.time <- FALSE
} else {
flat.tracks <- rbind(flat.tracks, my.tracks)
}
offset <- offset + 100
num.songs <- num.songs - 100
}
tracks.url <- paste(unlist(get.row$tracks.href), "/?offset=", offset, sep = "")
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
my.tracks <- flatten(all.tracks$items) %>% select(track.duration_ms, added_at, track.artists, track.id, track.name, track.popularity, track.album.artists, track.album.id, track.album.name)
flat.tracks <- rbind(flat.tracks, my.tracks)
} else {
tracks.url <- unlist(get.row$tracks.href)
get.tracks <- GET(tracks.url, spotify.Token)
all.tracks <- fromJSON(toJSON(content(get.tracks)))
flat.tracks <- flatten(all.tracks$items) %>% select(track.duration_ms, added_at, track.artists, track.id, track.name, track.popularity, track.album.artists, track.album.id, track.album.name)
}
return(flat.tracks)
}
tracks <- lapply(flat.all.user.playlists$id, GetTracks)
flat.tracks <- do.call(rbind, tracks)
#Gets the artists for each of the songs and puts them in a single column
GetArtist <- function(artist.list){
artists <- unlist(artist.list)[4]
return(artists)
}
artists <- lapply(flat.tracks$track.album.artists, GetArtist)
flat.artists <- unlist(artists)
#Adds the extra column to flat.tracks
flat.tracks$artist.name <- flat.artists
#Lets get some random facts about the data! Because people are easily entertained! 1 min = 36,000,000 ms
duration.ms <- unlist(flat.tracks$track.duration_ms) %>% sum()
duration.hours <- round(duration.ms / 3600000, 2)
#Gets the popularity of all the tracks and creates a scatter plot of song vs popularity
popular.tracks <- flat.tracks %>% select(track.id, track.name, track.popularity, artist.name)
average.popularity <- round(unlist(popular.tracks$track.popularity) %>% sum() / nrow(popular.tracks), 0)
plot_ly(popular.tracks, x = ~track.name, y = ~track.popularity, type = "scatter", hoverinfo = "text",
text = ~paste("Song: ", unlist(track.name), "</br> Artist: ", as.list(artist.name), "</br> Populartiy: ", unlist(track.popularity), sep = "")) %>%
layout(xaxis = list(showticklabels = FALSE, title = "Your Songs"), yaxis = list(title = "Popularity"),
title = "The Popularity of Your Songs")
all.albums.URL <- 'https://api.spotify.com/v1/albums/3MHTGwjWJhfcc3yBnvo6yh'
get.albums <- GET(all.albums.URL, spotify.Token)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
album.genres <- all.albums$genres #this is an array and I don't know how to get things out now
audio_features<-data.frame(
danceability=NULL,  energy=NULL,  key=NULL,  loudness=NULL,  mode=NULL,  speechiness=NULL,
acousticness=NULL,  instrumentalness=NULL,  liveness=NULL,  valence=NULL,  tempo=NULL,
duration_ms=NULL,  time_signature=NULL
)
for(i in tracks$id){
url <- paste0("https://api.spotify.com/v1/audio-features/", i)
list = content(GET(url = url, add_headers(Authorization = spotifyToken)))
temp<-data.frame(
danceability=list$danceability[1],
energy=list$energy[1],
key=list$key[1],
loudness=list$loudness[1],
mode=list$mode[1],
speechiness=list$speechiness[1],
acousticness=list$acousticness[1],
instrumentalness=list$instrumentalness[1],
liveness=list$liveness[1],
valence=list$valence[1],
tempo=list$tempo[1],
duration_ms=list$duration_ms[1],
time_signature=list$time_signature[1]
)
audio_features<-rbind(audio_features, temp)
}
print(temp)
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1)
plot_ly(tracks, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(tracks$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1))
View(temp)
colnames(temp) <- c("danceability", "energy", "key", "loudness", "mode", "speechiness", "instrumentalness", "liveness", "valence", "tempo", "type", "id", "uri", "track_href", "analysis_url", "duration_ms", "time_signature")
colnames(temp) <- c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "type", "id", "uri", "track_href", "analysis_url", "duration_ms", "time_signature")
plot_ly(temp, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(temp$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
library(plotly)
plot_ly(temp, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(temp$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
merged.tracks.features <- cbind(tracks, temp)
View(merged.tracks.features)
plot_ly(temp, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(temp$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# search for artist
# function: artist name input
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
#return(artist.results$tracks)
}
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1))
colnames(temp) <- c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "type", "id", "uri", "track_href", "analysis_url", "duration_ms", "time_signature")
merged.tracks.features <- cbind(tracks, temp)
plot_ly(temp, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(temp$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60,
#color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
??brewer.pal
library(RColorBrewer)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60,
#color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
merged.tracks.features <- unique(cbind(tracks, temp))
merged.tracks.features <- full_join(tracks, temp, by = "id")
merged.tracks.features <- full_join(tracks, temp, by = c("id = id"))
merged.tracks.features <- full_join(tracks, temp, by = c("id", "duration_ms"))
merged.tracks.features <- cbind(tracks$name, tracks$popularity, temp)
View(merged.tracks.features)
merged.tracks.features <- cbind(tracks$name && tracks$popularity, temp)
merged.tracks.features <- cbind(select(tracks, name, popularity), temp)
View(merged.tracks.features)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60,
#color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# search for artist
# function: artist name input
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
#return(artist.results$tracks)
}
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1))
colnames(temp) <- c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "type", "id", "uri", "track_href", "analysis_url", "duration_ms", "time_signature")
merged.tracks.features <- cbind(select(tracks, name, popularity), temp)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
