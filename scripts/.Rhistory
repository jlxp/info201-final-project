<<<<<<< HEAD
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
=======
<<<<<<< HEAD
>>>>>>> 3ac000188ebd612245560a0054f6d78f4f0e1c5d
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter')
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
test.graph <- JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
test.graph
test.graph <- JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
# Set-up
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter')
return(playlist.audio.features)
}
test.graph <- JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
# Set-up
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter')
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
# Set-up
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers')
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers')
#return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
# Set-up
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers')
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Popularity"))
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# This function gets the audio features for a song.
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
return(results)
}
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Popularity"))
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
JoysGraph <- function(spotifyPlaylist) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~danceability, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Danceability"))
return(p)
}
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
JoysGraph('37i9dQZF1DXcBWIGoYBM5M')
JoysGraph <- function(spotifyPlaylist, audio.features.variable) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~audio.features.variable, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Danceability"))
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', danceability)
JoysGraph(37i9dQZF1DXcBWIGoYBM5M, danceability)
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', 'danceability')
<<<<<<< HEAD
JoysGraph <- function(spotifyPlaylist) {
# Mary's code to get the top 50 playlist
spotifyUser <- 'spotify'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks?fields=items(track)")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.songs <- flatten(all.playlist$items)
#  Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
# This line unlists the audio features and puts them into a data frame
playlist.audio.features <- data.frame(matrix(unlist(lapply(flat.playlist$track.id, GetFeatures)), nrow = nrow(flat.playlist), byrow = 1))
# This line changes the data frame column names
colnames(playlist.audio.features) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
# This line binds the track name and popularity columns to the playlist audio features
playlist.audio.features <- cbind(select(flat.playlist, track.name, track.popularity), playlist.audio.features)
# This creates a scatter plot of track name by whatever audio features variable the user selects.
# In the UI file I was thinking there would be a dropdown menu or radio buttons that the user can
# select to change what variable is graphed on the y axis.
p <- playlist.audio.features %>% plot_ly(x = ~track.name, y = ~danceability, type = 'scatter', mode = 'markers') %>%
layout(xaxis = list(showticklabels = FALSE, title = "Track Names"), yaxis = list(title = "Danceability"))
return(p)
}
JoysGraph('37i9dQZF1DXcBWIGoYBM5M', danceability)
JoysGraph('37i9dQZF1DXcBWIGoYBM5M')
=======
=======
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity, type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", artist, "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph("drake")
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list)
artist <- data.input$Name[1]
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity, type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph("drake")
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list)
artist <- data.input$Name[1]
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity, type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph("drake")
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity, type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
#add_trace() %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph("drake", "rihanna")
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
print(data.input.two$Name)
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity, type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
#add_trace() %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph("drake", "rihanna")
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity, type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity, name = data.input.two$Name[1]) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph("drake", "rihanna")
two.artists.to.graph(c("drake", "rihanna"))
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity,name = data.input$Name[1], type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity, name = data.input.two$Name[1]) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph(c("drake", "rihanna"))
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity,name = data.input$Name[1], type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity,x = ~1:nrow(data.input.two), name = data.input.two$Name[1]) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph(c("drake", "rihanna"))
two.artists.to.graph(c("drake", "taylor swift"))
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
rbind(top.ten.data.frame, c(name.artist, popular, "none", 0, "none", "none", 0, Null, Null, Null))
}
return(top.ten.data.frame)
}
artists.top.ten.frame("taylor swift")
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
rbind(top.ten.data.frame, c(name.artist, popular, "none", 0, "none", "none", 0, "none", "none", "none"))
}
return(top.ten.data.frame)
}
artists.top.ten.frame("taylor swift")
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
rbind(top.ten.data.frame, data.frame(name.artist, popular, "none", 0, "none", "none", 0, "none", "none", "none"))
}
return(top.ten.data.frame)
}
artists.top.ten.frame("taylor swift")
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
rbind(top.ten.data.frame, data.frame(Name = name.artist, Artist.Popularity=popular, Song="none", Popularity=0, Album="none", Preview="none", Followers=0, Big.Image="none", Medium.Image="none", Small.Image="none"))
}
return(top.ten.data.frame)
}
artists.top.ten.frame("future")
artists.top.ten.frame("taylor swift")
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
new.row = data.frame(name.artist, popular, "none", 0, "none", "none", 0, "none", "none", "none")
rbind(top.ten.data.frame, new.row)
}
return(top.ten.data.frame)
}
artists.top.ten.frame("taylor swift")
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
new.row = data.frame(Name=name.artist, Artist.Popularity=popular, Song="none", Popularity=0, Album="none", Preview ="none", Followers=0, Big.Image="none", Medium.Image="none", Small.Image="none")
rbind(top.ten.data.frame, new.row)
}
return(top.ten.data.frame)
}
artists.top.ten.frame("taylor swift")
artists.top.ten.frame <- function(artist.name.search) {
# if search with two or more strings
if (grepl(" ", artist.name.search)) {
artist.name.search <- gsub(" ", "+", artist.name.search)
}
#search for artist
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", artist.name.search, "&type=artist")
response <- GET(url.search.name, token.spotify)
search.results <- fromJSON(toJSON(content(response)))
name.artist <- search.results$artists$items$name[[1]]
id <- search.results$artists$items$id[[1]]
follow <- search.results$artists$items$followers$total[[1]]
popular <- search.results$artists$items$popularity[[1]]
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", id, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, token.spotify)
artist.results <- fromJSON(toJSON(content(response.artist)))
Name <- c() # name of artist
Popularity <- c() # for individual song
Song <- c() # name of song
Preview <- c() # hyperlink to preview of song
Followers <- c() # individual artists follower count
Artist.Popularity <- c() # individual popularity of artist
Album <- c() # album name for the that individual song
Big.Image <- c() # 650x650 pixels album image
Medium.Image <- c() # 300x300 pixels album image
Small.Image <- c() # 64x64 pixels album image
# the for loop is set up incase an artist doesn't have a top ten
for (i in 1:length(artist.results$tracks$name)) {
Name <- c(Name, name.artist)
Popularity <- c(Popularity, artist.results$tracks$popularity[[i]])
Song <- c(Song, artist.results$tracks$name[[i]])
Album <- c(Album, artist.results$tracks$album$name[[i]])
Preview <- c(Preview, artist.results$tracks$preview_url[[i]])
Followers <- c(Followers, follow)
Artist.Popularity <- c(Artist.Popularity, popular)
Big.Image <- c(Big.Image, artist.results$tracks$album$images[[1]]$url[[1]])
Medium.Image <- c(Medium.Image, artist.results$tracks$album$images[[1]]$url[[2]])
Small.Image <- c(Small.Image, artist.results$tracks$album$images[[1]]$url[[3]])
}
top.ten.data.frame <- data.frame(Name, Artist.Popularity, Song, Popularity, Album, Preview, Followers, Big.Image, Medium.Image, Small.Image)
while (nrow(top.ten.data.frame) < 10) {
new.row = data.frame(Name=name.artist, Artist.Popularity=popular, Song="none", Popularity=0, Album="none", Preview ="none", Followers=0, Big.Image="none", Medium.Image="none", Small.Image="none")
top.ten.data.frame <- rbind(top.ten.data.frame, new.row)
}
return(top.ten.data.frame)
}
artists.top.ten.frame("taylor swift")
two.artists.to.graph(c("drake", "taylor swift"))
two.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
#artist.two.frame <- artists.top.ten.frame(artist.list[2])
#merged.frame <- data.frame(artist.one.frame, artist.two.frame)
#plot_ly(merged.frame, x = ~1:nrow(merged.frame), y = ~Popularity, name = artist.one.frame$Name, type = 'scatter', mode = 'lines+markers') %>%
#add_trace(y = artist.two.frame$Popularity, name = artist.two.frame$Name, mode = "lines+markers") %>%
#layout(title = "Popularity of Top Songs", xaxis = list(title = "Song Popularity", zeroline = TRUE, dtick = 1), yaxis = list(title = "Top Songs", zeroline = TRUE)) %>%
#rangeslider(start = .9, end = 10.1)
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity,name = data.input$Name[1], type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity,x = ~1:nrow(data.input.two), name = data.input.two$Name[1], text = ~paste0("Artist: ", data.input.two$Name[1], "\nSong: ", data.input.two$Song, "\nPopularity Rank: ", data.input.two$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
two.artists.to.graph(c("drake", "taylor swift"))
three.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
data.input.three <- artists.top.ten.frame(artist.list[3])
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity,name = data.input$Name[1], type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity,x = ~1:nrow(data.input.two), name = data.input.two$Name[1], text = ~paste0("Artist: ", data.input.two$Name[1], "\nSong: ", data.input.two$Song, "\nPopularity Rank: ", data.input.two$Popularity)) %>%
add_trace(y = ~data.input.three$Popularity,x = ~1:nrow(data.input.three), name = data.input.three$Name[1], text = ~paste0("Artist: ", data.input.three$Name[1], "\nSong: ", data.input.three$Song, "\nPopularity Rank: ", data.input.three$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
three.artists.to.graph(c("drake", "rihanna", "taylor swift"))
four.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
data.input.three <- artists.top.ten.frame(artist.list[3])
data.input.four <- artists.top.ten.frame(artist.list[4])
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity,name = data.input$Name[1], type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity,x = ~1:nrow(data.input.two), name = data.input.two$Name[1], text = ~paste0("Artist: ", data.input.two$Name[1], "\nSong: ", data.input.two$Song, "\nPopularity Rank: ", data.input.two$Popularity)) %>%
add_trace(y = ~data.input.three$Popularity,x = ~1:nrow(data.input.three), name = data.input.three$Name[1], text = ~paste0("Artist: ", data.input.three$Name[1], "\nSong: ", data.input.three$Song, "\nPopularity Rank: ", data.input.three$Popularity)) %>%
add_trace(y = ~data.input.four$Popularity,x = ~1:nrow(data.input.four), name = data.input.four$Name[1], text = ~paste0("Artist: ", data.input.four$Name[1], "\nSong: ", data.input.four$Song, "\nPopularity Rank: ", data.input.four$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
four.artists.to.graph(c("drake", "rihanna", "taylor swift", "beyonce"))
five.artists.to.graph <- function(artist.list) {
data.input <- artists.top.ten.frame(artist.list[1])
data.input.two <- artists.top.ten.frame(artist.list[2])
data.input.three <- artists.top.ten.frame(artist.list[3])
data.input.four <- artists.top.ten.frame(artist.list[4])
data.input.five <- artists.top.ten.frame(artist.list[5])
p <- plot_ly(data.input, x = ~1:nrow(data.input), y = ~Popularity,name = data.input$Name[1], type = 'scatter', mode = 'lines+markers', marker = list(size = 8), hoverinfo = "text", text = ~paste0("Artist: ", data.input$Name[1], "\nSong: ", data.input$Song, "\nPopularity Rank: ", data.input$Popularity)) %>%
add_trace(y = ~data.input.two$Popularity,x = ~1:nrow(data.input.two), name = data.input.two$Name[1], text = ~paste0("Artist: ", data.input.two$Name[1], "\nSong: ", data.input.two$Song, "\nPopularity Rank: ", data.input.two$Popularity)) %>%
add_trace(y = ~data.input.three$Popularity,x = ~1:nrow(data.input.three), name = data.input.three$Name[1], text = ~paste0("Artist: ", data.input.three$Name[1], "\nSong: ", data.input.three$Song, "\nPopularity Rank: ", data.input.three$Popularity)) %>%
add_trace(y = ~data.input.four$Popularity,x = ~1:nrow(data.input.four), name = data.input.four$Name[1], text = ~paste0("Artist: ", data.input.four$Name[1], "\nSong: ", data.input.four$Song, "\nPopularity Rank: ", data.input.four$Popularity)) %>%
add_trace(y = ~data.input.five$Popularity,x = ~1:nrow(data.input.five), name = data.input.five$Name[1], text = ~paste0("Artist: ", data.input.five$Name[1], "\nSong: ", data.input.five$Song, "\nPopularity Rank: ", data.input.five$Popularity)) %>%
layout(title = "Popularity of Top Songs", xaxis = list(title = "Each Song", zeroline = TRUE, dtick = 1 ), yaxis = list(title = "Popularity Ranking", zeroline = TRUE, range = c(0,100))) %>%
rangeslider(start = .9, end = 10.1)
return(p)
}
five.artists.to.graph(c("drake", "rihanna", "taylor swift", "beyonce", "lil yachty"))
artist.to.graph("drake")
artist.to.graph <- function(artist.name) {
artist.frame <- artists.top.ten.frame(artist.name)
return(p.graph(artist.frame))
}
artist.to.graph("drake")
artist.to.graph("taylor swift")
>>>>>>> amitesh charts 1-5 completed
>>>>>>> 3ac000188ebd612245560a0054f6d78f4f0e1c5d
