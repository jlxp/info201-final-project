xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity), colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60,
#color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
??brewer.pal
library(RColorBrewer)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60,
#color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
merged.tracks.features <- unique(cbind(tracks, temp))
merged.tracks.features <- full_join(tracks, temp, by = "id")
merged.tracks.features <- full_join(tracks, temp, by = c("id = id"))
merged.tracks.features <- full_join(tracks, temp, by = c("id", "duration_ms"))
merged.tracks.features <- cbind(tracks$name, tracks$popularity, temp)
View(merged.tracks.features)
merged.tracks.features <- cbind(tracks$name && tracks$popularity, temp)
merged.tracks.features <- cbind(select(tracks, name, popularity), temp)
View(merged.tracks.features)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60,
#color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize", "https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295', '5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# search for artist
# function: artist name input
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
#return(artist.results$tracks)
}
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1))
colnames(temp) <- c("danceability", "energy", "key", "loudness", "mode", "speechiness", "acousticness", "instrumentalness", "liveness", "valence", "tempo", "type", "id", "uri", "track_href", "analysis_url", "duration_ms", "time_signature")
merged.tracks.features <- cbind(select(tracks, name, popularity), temp)
plot_ly(merged.tracks.features, x = ~name, y = ~popularity, text = ~name, type = 'scatter', mode = 'markers',
size = ~duration_ms/1000/60, color = as.factor(merged.tracks.features$popularity),
colors = brewer.pal(9,"Set1"),
marker = list(opacity = 0.8, sizemode = 'diameter', sizeref=3)) %>%
layout(title = 'Artist Name',
xaxis = list(showgrid = FALSE, showticklabels=TRUE, title="", type = "category"),
yaxis = list(showgrid = FALSE, showticklabels=FALSE, title="", type = "category"),
showlegend = FALSE)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize",
"https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295',
'5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# search for artist
# function: artist name input
FindArtistId <- function(name.of.artist) {
url.search.name <- paste0("https://api.spotify.com", "/v1/search?q=", name.of.artist, "&type=artist")
response <- GET(url.search.name, spotifyToken)
search.results <- fromJSON(toJSON(content(response)))
ids <- search.results$artists$items$id
return(ids[1])
}
# end function
# take in artist ID and give the top songs with popularity
top.10.songs <- function(input.ID) {
artist.get.url <- paste0("https://api.spotify.com", "/v1/artists/", input.ID, "/top-tracks?country=US")
response.artist <- GET(artist.get.url, spotifyToken)
artist.results <- fromJSON(toJSON(content(response.artist)))
top.ten <- select(artist.results$tracks, name, id, popularity, duration_ms)
return(top.ten)
}
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$tracks$items
}
GetFeatures <- function(track.id) {
uri <- paste0("https://api.spotify.com/v1/audio-features/", track.id)
response <- GET(uri, spotifyToken)
results <- fromJSON(toJSON(content(response)))
}
tracks <- top.10.songs(FindArtistId("david+bowie"))
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1))
colnames(temp) <- c("danceability",
"energy",
"key",
"loudness",
"mode",
"speechiness",
"acousticness",
"instrumentalness",
"liveness",
"valence",
"tempo",
"type",
"id",
"uri",
"track_href",
"analysis_url",
"duration_ms",
"time_signature")
merged.tracks.features <- cbind(select(tracks, name, popularity), temp)
plot_ly(merged.tracks.features, x = ~loudness, y = ~danceability, z = ~energy, type = 'scatter3d', mode = 'lines', color = ~name)
p <- plot_ly(merged.tracks.features, x = ~loudness, y = ~energy, z = ~duration_ms) %>%
add_histogram2d()
p
tracks <- GetAlbums(FindArtistId("david+bowie"))
tracks <- top.10.songs(FindArtistId("david+bowie"))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
tracks <- GetAlbums(FindArtistId("david+bowie"))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
View(tracks)
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
View(tracks)
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums/tracks?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
View(tracks)
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums/tracks?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums/tracks?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
GetAlbumsID <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items$id
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
View(tracks)
GetAlbumsID <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.tracks <- all.albums$items
}
plot_ly(merged.tracks.features, x = ~loudness, y = ~danceability, z = ~energy, type = 'scatter3d', mode = 'lines', color = ~name)
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.list <- all.albums$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
GetAlbumTracks <- function(album.id) {
album.tracks.uri <- paste0('https://api.spotify.com/v1/albums/', album.id, '/tracks')
get.tracks <- GET(album.tracks.uri, spotifyToken)
all.tracks <- jsonlite::fromJSON(toJSON(content(get.tracks)))
}
tracks <- GetAlbumTracks(GetAlbums(FindArtistId("david+bowie")))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.list <- all.albums$items$id
}
tracks <- GetAlbumTracks(GetAlbums(FindArtistId("david+bowie")))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.list <- all.albums$items$ids
}
tracks <- GetAlbumTracks(GetAlbums(FindArtistId("david+bowie")))
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
ablum.list <- all.albums$items
}
tracks <- GetAlbumTracks(GetAlbums(FindArtistId("david+bowie")))
tracks <- GetAlbums(FindArtistId("david+bowie"))
View(tracks)
tracks <- GetAlbumTracks(GetAlbums(FindArtistId("david+bowie"))$id)
tracks <- lapply(GetAlbums(FindArtistId("david+bowie"))$id, GetAlbumTracks)
names(tracks)
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
album.list <- all.albums$items
album.id <- album.list$id
}
tracks <- lapply(GetAlbums(FindArtistId("david+bowie")), GetAlbumTracks)
print(tracks)
GetAlbumTracks <- function(album.id) {
album.tracks.uri <- paste0('https://api.spotify.com/v1/albums/', album.id, '/tracks')
get.tracks <- GET(album.tracks.uri, spotifyToken)
all.tracks <- jsonlite::fromJSON(toJSON(content(get.tracks)))
tracks <- all.tracks$items
}
tracks <- lapply(GetAlbums(FindArtistId("david+bowie")), GetAlbumTracks)
tracks <- GetAlbums(FindArtistId("david+bowie"))
all.tracks <- lapply(tracks, GetAlbumTracks)
all.tracks <- lapply(as.data.frame(tracks), GetAlbumTracks)
all.tracks <- lapply(tracks, GetAlbumTracks)
all.tracks <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 20, byrow = 1))
GetAlbumTracks <- function(album.id) {
album.tracks.uri <- paste0('https://api.spotify.com/v1/albums/', album.id, '/tracks')
get.tracks <- GET(album.tracks.uri, spotifyToken)
all.tracks <- jsonlite::fromJSON(toJSON(content(get.tracks)))
tracks <- all.tracks$items
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
all.tracks <- lapply(tracks, GetAlbumTracks)
GetAlbumTracks <- function(album.id) {
album.tracks.uri <- paste0('https://api.spotify.com/v1/albums/', album.id, '/tracks')
get.tracks <- GET(album.tracks.uri, spotifyToken)
all.tracks <- jsonlite::fromJSON(toJSON(content(get.tracks)))
tracks <- all.tracks
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
all.tracks <- lapply(tracks, GetAlbumTracks)
GetAlbums <- function(artist.id) {
all.albums.URL <- paste0('https://api.spotify.com/v1/artists/', artist.id, '/albums?country=US')
get.albums <- GET(all.albums.URL, spotifyToken)
all.albums <- jsonlite::fromJSON(toJSON(content(get.albums)))
album.list <- all.albums$items
album.id <- album.list
}
tracks <- GetAlbums(FindArtistId("david+bowie"))
all.tracks <- lapply(tracks$id, GetAlbumTracks)
print(all.tracks)
all.tracks <- all.tracks$items
all.tracks <- lapply(tracks$id, GetAlbumTracks)
all.tracks <- all.tracks$items$
temp <- data.frame(matrix(unlist(lapply(tracks$id, GetFeatures)), nrow = 10, byrow = 1))
all.tracks <- all.tracks$items
all.tracks <- lapply(tracks$id, GetAlbumTracks)
all.tracks <- all.tracks$items$artists
all.tracks <- lapply(tracks$id, GetAlbumTracks)
all.tracks <- lapply(all.tracks, unlist)
all.tracks <- lapply(tracks$id, GetAlbumTracks)
all.tracks <- data.frame(matrix(unlist(lapply(all.tracks$items, GetFeatures)), nrow = 20, byrow = 1))
all.tracks <- data.frame(matrix(unlist(all.tracks$items), nrow = 20, byrow = 1))
all.tracks <- data.frame(matrix(unlist(all.tracks$items), nrow = 7, byrow = 1))
spotifyUser <- '1279377203'
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
# Getitng the songs from the top 50 playlist
songs.URL <- paste("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks", sep = "")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
flat.playlist <- flatten(all.playlist.flat$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
spotifyUser <- '1279377203'
spotifyPlaylist <- '37i9dQZF1DXcBWIGoYBM5M'
# Getitng the songs from the top 50 playlist
songs.URL <- paste("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks", sep = "")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
get.Songs <- GET(songs.URL, spotifyToken)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize",
"https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295',
'5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
songs.URL <- paste("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks", sep = "")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
spotifyUser <- '1279377203'
spotifyPlaylist <- '37i9dQZEVXbLRQDuF5jeBp'
# Getitng the songs from the top 50 playlist
songs.URL <- paste("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks", sep = "")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
spotifyUser <- '1279377203'
spotifyPlaylist <- '37i9dQZEVXbLRQDuF5jeBp'
# Getitng the songs from the top 50 playlist
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks", "?country=US")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
spotifyPlaylist <- '37i9dQZEVXbLRQDuF5jeBp'
songs.URL <- paste0("https://api.spotify.com/v1/users/", spotifyUser, "/playlists/", spotifyPlaylist, "/tracks", "?country=US")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Getitng the songs from the top 50 playlist
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/21THa8j9TaSGuXYNBU5tsC/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize",
"https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295',
'5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/21THa8j9TaSGuXYNBU5tsC/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
spotifyUser <- '1279377203'
spotifyPlaylist <- '37i9dQZEVXbLRQDuF5jeBp'
# Getitng the songs from the top 50 playlist
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
all.playlist.flat <- flatten(all.playlist$items)
# Creates the dataframe that has the information from the top 50 playlist.
flat.playlist <- flatten(all.playlist$items) %>%
select(track.name, track.album.name, track.explicit, track.popularity, track.id, track.album.album_type)
spotifyUser <- '1279377203'
spotifyPlaylist <- '37i9dQZEVXbLRQDuF5jeBp'
# Getitng the songs from the top 50 playlist
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize",
"https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295',
'5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
library(devtools)
library(jsonlite)
library(httr)
library(dplyr)
library(plotly)
library(RColorBrewer)
#This is all the stuff spotify needs to know before you start
spotifyEndpoint <- oauth_endpoint(NULL, "https://accounts.spotify.com/authorize",
"https://accounts.spotify.com/api/token")
spotifyApp <- oauth_app("spotify", '87ccb0dca2bc4cac82d82a731fa65295',
'5094f0bd6d4b4a368a990909d2a15acd')
spotifyToken <- oauth2.0_token(spotifyEndpoint, spotifyApp)
# Getitng the songs from the top 50 playlist
songs.URL <- paste0("https://api.spotify.com/v1/users/1279377203/playlists/37i9dQZEVXbLRQDuF5jeBp/tracks")
get.Songs <- GET(songs.URL, spotifyToken)
all.playlist <- jsonlite::fromJSON(toJSON(content(get.Songs)))
